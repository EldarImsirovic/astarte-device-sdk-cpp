# (C) Copyright 2025, SECO Mind Srl
#
# SPDX-License-Identifier: Apache-2.0

name: Check build for the library

on:
  pull_request:
  push:

jobs:
  build-simple-sample-fetch-grpc:
    runs-on: ubuntu-latest
    concurrency:
      group: build-simple-sample-fetch-grpc-${{ github.ref }}
      cancel-in-progress: true
    steps:
    - uses: actions/checkout@v4
    - name: Build library for C++ 20
      run: ./build_sample.sh simple
  build-simple-sample-install-grpc:
    runs-on: ubuntu-latest
    concurrency:
      group: build-simple-sample-install-grpc-${{ github.ref }}
      cancel-in-progress: true
    env:
      GRPC_VERSION: "1.69.0"
    steps:
    - uses: actions/checkout@v4
      with:
        path: astarte-device-sdk-cpp
    - name: Install gRPC dependencies
      run: |
        sudo apt update
        sudo apt install -y build-essential autoconf libtool pkg-config
    - name: Check out the gRPC repo
      run: git clone --recurse-submodules -b v${{ env.GRPC_VERSION }} --depth 1 --shallow-submodules https://github.com/grpc/grpc
    - name: Set MY_INSTALL_DIR variable
      run: |
        MY_INSTALL_DIR=$PWD/grpc-install
        echo "MY_INSTALL_DIR=$MY_INSTALL_DIR" >> $GITHUB_ENV
        mkdir -p $MY_INSTALL_DIR
        echo "$MY_INSTALL_DIR" >> "$GITHUB_PATH"
    - name: Restore cached gRPC build directory
      id: cache-grpc-cpp-restore
      uses: actions/cache/restore@v4
      with:
        path: |
          ./grpc/cmake
          ./grpc-install
        key: grpc-cpp-v${{ env.GRPC_VERSION }}
    - name: Compile from source gRPC
      if: steps.cache-grpc-cpp-restore.outputs.cache-hit != 'true'
      run: |
        mkdir ./grpc/cmake/build
        pushd ./grpc/cmake/build
        cmake -DgRPC_INSTALL=ON \
              -DgRPC_BUILD_TESTS=OFF \
              -DCMAKE_CXX_STANDARD=17 \
              -DCMAKE_INSTALL_PREFIX=$MY_INSTALL_DIR \
              ../..
        make -j $(nproc)
        make install
        popd
    - name: Cache the gRPC build directory
      if: steps.cache-grpc-cpp-restore.outputs.cache-hit != 'true'
      id: cache-grpc-cpp-save
      uses: actions/cache/save@v4
      with:
        path: |
          ./grpc/cmake
          ./grpc-install
        key: ${{ steps.cache-grpc-cpp-restore.outputs.cache-primary-key }}
    - name: Build library for C++ 20
      working-directory: ./astarte-device-sdk-cpp
      run: ./build_sample.sh simple --fresh --system_grpc --stdcpp 20
    - name: Build library for C++ 17
      working-directory: ./astarte-device-sdk-cpp
      run: ./build_sample.sh simple --fresh --system_grpc --stdcpp 17
  build-qt-sample:
    runs-on: ubuntu-latest
    needs: build-simple-sample-install-grpc
    strategy:
      matrix:
        qt_version: [5.15.2, 6.5.3]
    env:
      GRPC_VERSION: "1.69.0"
    steps:
    - uses: actions/checkout@v4
    - name: Set MY_INSTALL_DIR variable
      run: |
        MY_INSTALL_DIR=$PWD/grpc-install
        echo "MY_INSTALL_DIR=$MY_INSTALL_DIR" >> $GITHUB_ENV
        mkdir -p $MY_INSTALL_DIR
        echo "$MY_INSTALL_DIR" >> "$GITHUB_PATH"
    - name: Restore gRPC cache
      uses: actions/cache/restore@v4
      with:
        path: |
          ./grpc/cmake
          ./grpc-install
        key: grpc-cpp-v${{ env.GRPC_VERSION }}
    - name: Install Qt
      uses: jurplel/install-qt-action@v4
      with:
        version: ${{ matrix.qt_version }}
        target: desktop
        arch: gcc_64
        cache: true
        cache-key-prefix: install-qt-action
    - name: Detect Qt path
      id: qt-path
      run: |
        if [[ "${{ matrix.qt_version }}" == 5* ]]; then
          echo "QT_PATH=$Qt/5.15.2/gcc_64/lib/cmake/Qt5" >> $GITHUB_ENV
          echo "QT_MAJOR_VERSION=5" >> $GITHUB_ENV
        else
          echo "QT_PATH=$Qt/6.5.3/gcc_64/lib/cmake/Qt6" >> $GITHUB_ENV
          echo "QT_MAJOR_VERSION=6" >> $GITHUB_ENV
        fi
    - name: Build Qt Examples
      run: ./build_sample.sh qt --qt_version "$QT_MAJOR_VERSION" --qt_path "$QT_PATH" --fresh --system_grpc
